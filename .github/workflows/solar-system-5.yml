name: Solar System Workflow Fith Part

on: 
    workflow_dispatch:
    push:
        branches:
            - main
            - 'feature/*'

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }} 

jobs:
    unit-testing:
        name: Unit Testing
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
          MONGO_URI: 'mongodb://localhost:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
        strategy:
          matrix:
            nodejs_version: [18, 20]
            operating_system: [ubuntu-latest]
            exclude:
              - nodejs_version: 18
                operating_system: macos-latest
        runs-on: ${{ matrix.operating_system }}

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
            
            - name: Setup NodeJS Version - 18
              uses: actions/setup-node@v3
              with:
                 node-version: ${{ matrix.nodejs_version }}
            
            - name: Cache NPM dependencies
              uses: actions/cache@v3
              with:
                path: node_modules
                key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}      

            - name: Install Dependencies
              run: npm install
            
            - name: Unit testing
              id: nodejs-unit-testing-step
              run: npm test

            - name: Archive Test Result
              if: always()
              uses: actions/upload-artifact@v3
              with:
                name: Mocha-Test-Result
                path: test-results.xml

    code-coverage:
        name: Code coverage
        container:
          image: node:18
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            options:
              --name mongo
        env:
          MONGO_URI: 'mongodb://mongo:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
            
            #- name: Setup NodeJS Version - 18
            #  uses: actions/setup-node@v3
            #  with:
            #     node-version: 18
            
            - name: Cache NPM dependencies
              uses: actions/cache@v3
              with:
                path: node_modules
                key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}      

            - name: Install Dependencies
              run: npm install
            
            - name: Check Code Coverage
              continue-on-error: true
              run: npm run coverage

            - name: Archive Test Result
              uses: actions/upload-artifact@v3
              with:
                name: Code-Coverage-Result
                path: coverage
                retention-days: 5   

    docker:
      name: Containerization
      runs-on: ubuntu-latest
      permissions:
        packages: write
      needs: [unit-testing, code-coverage]
      steps:
        - name: Checkout Repo
          uses: actions/checkout@v4

        - name: Login to GHCR
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}
        
        - name: Container Registry Push
          uses: docker/build-push-action@v4
          with:
            context: .
            push: true
            tags: ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}
          
    dev-deploy:
      needs: docker
      runs-on: ubuntu-latest
      environment:
        name: development
        url: https://$(URL)
      steps:
        - name: Checkout Repo
          uses: actions/checkout@v4

        - name: Install kubectl CLI
          uses: azure/setup-kubectl@v3
          with:
            version: 'v1.26.0'
        
        - name: Fetch Kubernetes Cluster Details
          run: |
            #kubectl version --short
            echo -------------------------------------------
            #kubectl get nodes
            

    prod-deploy:
      needs: dev-deploy
      runs-on: ubuntu-latest
      environment:
        name: production
        url: https://$(URL)
      steps:
        - name: Checkout Repo
          uses: actions/checkout@v4

        - name: Install kubectl CLI
          uses: azure/setup-kubectl@v3
          with:
            version: 'v1.26.0'
        
        - name: Fetch Kubernetes Cluster Details
          run: |
            #kubectl version --short
            echo -------------------------------------------
            #kubectl get nodes
        